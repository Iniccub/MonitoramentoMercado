import streamlit as st
import requests
from serpapi import GoogleSearch
from bs4 import BeautifulSoup
import concurrent.futures  # Para processamento paralelo
import time
from typing import List, Dict  # Para tipagem
import os
from dotenv import load_dotenv
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import json
import base64
from io import BytesIO
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

# Carrega as vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes iniciais
st.set_page_config(
    page_title="Monitoramento de Mercado",
    page_icon="icon.png",
    layout="wide",
    initial_sidebar_state="collapsed"  # Melhora o espa√ßo √∫til inicial
)

# Cache para resultados de busca
@st.cache_data(ttl=3600)  # Cache por 1 hora
def buscar_noticias(tema: str, serpapi_key: str) -> List[str]:
    params = {
        'q': tema,
        'tbm': 'nws',
        'hl': 'pt-br',
        'gl': 'br',
        'api_key': serpapi_key
    }
    try:
        search = GoogleSearch(params)
        resultados = search.get_dict()
        return [noticia.get('link') for noticia in resultados.get('news_results', []) if noticia.get('link')]
    except Exception as e:
        st.error(f"Erro na busca de not√≠cias: {str(e)}")
        return []

# Fun√ß√£o otimizada para extrair texto de uma URL
def limpar_texto(texto: str) -> str:
    """Remove caracteres especiais e formata o texto."""
    import re
    texto = re.sub(r'\s+', ' ', texto)  # Remove espa√ßos m√∫ltiplos
    texto = re.sub(r'[^\w\s.,!?-]', '', texto)  # Remove caracteres especiais
    return texto.strip()

def extrair_texto_url(url: str, headers: Dict[str, str]) -> dict:
    try:
        with requests.get(url, headers=headers, timeout=10) as response:
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Remove elementos irrelevantes
            for elemento in soup.find_all(['script', 'style', 'nav', 'footer', 'header']):
                elemento.decompose()
            
            # Extrai texto de elementos relevantes, incluindo tabelas
            textos = []
            
            # Processa elementos de texto normais
            for p in soup.find_all(['p', 'article', 'section', 'h1', 'h2', 'h3']):
                if len(p.get_text().strip()) > 50:
                    textos.append(p.get_text())
            
            # Processa tabelas
            for tabela in soup.find_all('table'):
                texto_tabela = []
                # Processa cabe√ßalho da tabela
                headers = []
                for th in tabela.find_all('th'):
                    headers.append(th.get_text().strip())
                if headers:
                    texto_tabela.append(" | ".join(headers))
                    texto_tabela.append("-" * 50)  # Linha separadora
                
                # Processa linhas da tabela
                for tr in tabela.find_all('tr'):
                    linha = []
                    for td in tr.find_all('td'):
                        linha.append(td.get_text().strip())
                    if linha:
                        texto_tabela.append(" | ".join(linha))
                
                if texto_tabela:
                    textos.append("\n".join(texto_tabela))
            
            # Extrai imagens relevantes
            imagens = []
            for img in soup.find_all('img'):
                src = img.get('src')
                alt = img.get('alt', '')
                if src and (src.startswith('http') or src.startswith('/')):
                    # Normaliza URLs relativas
                    if src.startswith('/'):
                        base_url = '/'.join(url.split('/')[:3])  # http(s)://dominio.com
                        src = base_url + src
                    imagens.append({'url': src, 'alt': alt})
            
            texto_final = '\n\n'.join(textos)
            return {
                'texto': limpar_texto(texto_final),
                'imagens': imagens[:5]  # Limita a 5 imagens por not√≠cia
            }
    except Exception as e:
        st.error(f"Erro ao extrair texto: {str(e)}")
        return {'texto': '', 'imagens': []}

# Inicializar a sess√£o de estado para armazenar o hist√≥rico da conversa
if 'messages' not in st.session_state:
    st.session_state.messages = []

# Definir vari√°veis globais
try:
    api_key_OpenaAI = st.secrets["openai"]["api_key"]
    serpapi_key = st.secrets["serpapi"]["api_key"]
except Exception as e:
    st.error('Chaves de API n√£o encontradas nas configura√ß√µes do Streamlit')
    st.stop()

# Valida√ß√£o adicional da chave OpenAI
if not api_key_OpenaAI.startswith('sk-'):
    st.error('Formato da chave da API OpenAI inv√°lido')
    st.stop()

api_url = 'https://api.openai.com/v1/chat/completions'
headers_api = {
    'Authorization': f'Bearer {api_key_OpenaAI.strip()}',
    'Content-Type': 'application/json'
}

# Cria√ß√£o de colunas para o logotipo e t√≠tulo
col1, col2, col3 = st.columns([0.6, 5, 0.6])

with col1:
    st.image("icon.png", width=100)

with col2:
    # Cabe√ßalho
    with st.container():
        # Exiba o t√≠tulo e o subt√≠tulo centralizados
        st.markdown(
            "<h1 style='text-align: center; font-family: Open Sauce; color: #4D268C;'>"
            "Monitoramento de Mercado - Rede Lius</h1>",
            unsafe_allow_html=True
        )
        st.markdown(
            "<h3 style='text-align: center;font-family: Open Sauce; color: #FCA629;'>"
            "Ferramenta de Monitoramento de Mercado e an√°lise de cen√°rios econ√¥micos da Rede Lius Agostinianos</h3>",
            unsafe_allow_html=True
        )

    st.write("---")

    # Define as op√ß√µes do menu suspenso
    opcoes = ["gpt-4o-mini", "gpt-4o", "gpt-4.1-nano"]

    # Cria o menu suspenso com as op√ß√µes
    modelo = st.selectbox("Selecione um modelo de IA para fazer a an√°lise:", opcoes)

    # Exibe a op√ß√£o selecionada
    st.write("Voc√™ usar√° o modelo (ü§ñ {}) para fazer a an√°lise".format(modelo))

    st.write("__")

    # Textos de descri√ß√£o dos modelos de IA
    texto_GPT4o_mini = "ü§ñ - O GPT 4o-mini √© o mais recente modelo compacto da s√©rie O. Ele √© otimizado para racioc√≠nio r√°pido e eficaz, com desempenho excepcionalmente eficiente em tarefas visuais e de codifica√ß√£o. A pesquisa √© a de menor custo de todos os modelos."
    texto_GPT4o = "ü§ñ - O GPT-4o (\"o\" de \"omni\") √© o modelo topo de linha, vers√°til e altamente inteligente. Ele aceita entradas de texto e imagem e produz sa√≠das de texto (incluindo Sa√≠das Estruturadas). √â o melhor modelo para a maioria das tarefas e mais capaz dos modelos da s√©rie O. A pesquisa tem maior custo, por√©m mais baixo em compara√ß√£o aos modelos mais complexos."
    texto_GPT41_nano = "ü§ñ - O GPT-4.1 nano √© o modelo GPT-4.1 mais r√°pido e econ√¥mico."

    # Deploy dos textos de descri√ß√£o dos modelos de IA
    st.markdown(f"<div style='text-align: justify; line-height: 1.6;'>{texto_GPT4o_mini}</div>", unsafe_allow_html=True)
    st.write("")
    st.markdown(f"<div style='text-align: justify; line-height: 1.6;'>{texto_GPT4o}</div>", unsafe_allow_html=True)
    st.write("")
    st.markdown(f"<div style='text-align: justify; line-height: 1.6;'>{texto_GPT41_nano}</div>", unsafe_allow_html=True)

    st.write("---")

    # Entrada de dados de pesquisa no Google
    tema = st.text_input(
        "Digite o termo que voc√™ deseja pesquisar no Google Not√≠cias:",
        placeholder="Digite aqui sua pesquisa",
        label_visibility="visible"
    )
    # Entrada de texto da diretriz da IA
    diretriz = st.text_input(
        "Qual a diretriz de an√°lise da IA?",
        placeholder="Digite aqui a diretriz com a qual voc√™ quer que a IA trabalhe",
        label_visibility="visible"
    )

    # Bot√£o para iniciar a an√°lise
    # Modifica√ß√£o no bloco de processamento de links
    # No bloco onde voc√™ usa a serpapi_key (remover a linha que busca do os.getenv)
    if st.button("Analisar"):
        if tema and diretriz:
            with st.spinner('Buscando e processando not√≠cias...'):
                links = buscar_noticias(tema, serpapi_key)
                
                if links:
                    # Processamento paralelo das URLs
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36'
                    }
                    
                    # Processamento paralelo otimizado
                    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                        futures = [executor.submit(extrair_texto_url, link, headers) for link in links]
                        textos = []
                        
                        # Barra de progresso
                        progress_bar = st.progress(0)
                        for i, future in enumerate(concurrent.futures.as_completed(futures)):
                            resultado = future.result()
                            if resultado and resultado['texto']:  # Verifica se h√° texto no resultado
                                textos.append(resultado['texto'])
                            progress_bar.progress((i + 1) / len(futures))
                        
                        texto_completo = '\n\n'.join(textos)
                        
                        # Otimiza√ß√£o do prompt para a IA
                        prompt_otimizado = f"""
                        Analise o seguinte conjunto de not√≠cias sobre '{tema}' e responda de acordo com a diretriz: '{diretriz}'
                        
                        Pontos importantes a considerar:
                        1. Foque nos fatos mais relevantes e atuais
                        2. Identifique tend√™ncias e padr√µes
                        3. Considere o impacto no contexto espec√≠fico da Rede Lius
                        4. Forne√ßa insights acion√°veis
                        
                        Texto para an√°lise: {texto_completo[:8000]}
                        """
                        
                        # Atualiza as mensagens com o prompt otimizado
                        st.session_state.messages.append({
                            'role': 'user',
                            'content': prompt_otimizado,
                            'exibir': False
                        })

                        # Configura√ß√£o otimizada para a API da OpenAI
                        body_message = {
                            'model': modelo,
                            'messages': st.session_state.messages,
                            'temperature': 0.3,  # Reduzido para maior precis√£o
                            'max_tokens': 4000,
                            'presence_penalty': 0.1,  # Encoraja diversidade moderada
                            'frequency_penalty': 0.1  # Evita repeti√ß√µes
                        }

                    try:
                        response_api = requests.post(api_url, headers=headers_api, json=body_message)
                        response_api.raise_for_status()
                        resposta = response_api.json()['choices'][0]['message']['content']
                        st.session_state.messages.append({'role': 'assistant', 'content': resposta})
                    except Exception as e:
                        st.error(f"Erro ao chamar a API da OpenAI: {e}")


    # Mostrar o hist√≥rico da conversa
    for msg in st.session_state.messages:
        if msg.get('exibir', True): # Exibe apensa se exibir for True ou n√£o estiver definido
            with st.chat_message(msg['role']):
                st.markdown(msg['content'])

    # Substituir o chat_input por um text_input regular
    nova_pergunta = st.text_input(
        "Deseja continuar a an√°lise com outra pergunta?",
        key="nova_pergunta_input"
    )

    # Adicionar um bot√£o para enviar a pergunta
    if st.button("Enviar pergunta", key="enviar_pergunta"):
        if nova_pergunta:
            st.session_state.messages.append({'role': 'user', 'content': nova_pergunta})

            body_message = {
                'model': modelo,
                'messages': st.session_state.messages,
                'temperature': 0.2,
                'max_tokens': 4000
            }

            try:
                response_api = requests.post(api_url, headers=headers_api, json=body_message)
                response_api.raise_for_status()
                nova_resposta = response_api.json()['choices'][0]['message']['content']
                st.session_state.messages.append({'role': 'assistant', 'content': nova_resposta})
                with st.chat_message("assistant"):
                    st.markdown(nova_resposta)
            except Exception as e:
                st.error(f"Erro ao continuar a conversa com a API: {e}")

# Rodap√© com copyright
st.markdown("""
    <style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #f0f0f0;
        color: #333;
        text-align: center;
        padding: 10px;
        font-size: 14px;
    }
    </style>
    <div class="footer">
        ¬© 2025 FP&A e Or√ßamento - Rede Lius. Todos os direitos reservados.
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.image("CSA.png", width=100)


def pre_processar_texto_ia(texto):
    """
    Pr√©-processa o texto da IA para melhorar a formata√ß√£o.
    
    Args:
        texto: Texto original da IA
        
    Returns:
        str: Texto pr√©-processado
    """
    import re
    
    # Substituir m√∫ltiplos asteriscos por formata√ß√£o adequada
    texto_processado = texto
    
    # Substituir padr√µes de negrito e it√°lico
    # Primeiro, substituir padr√µes de negrito e it√°lico combinados
    texto_processado = re.sub(r'\*\*\*(.*?)\*\*\*', r'<b><i>\1</i></b>', texto_processado)
    
    # Depois, substituir padr√µes de negrito
    texto_processado = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', texto_processado)
    
    # Por √∫ltimo, substituir padr√µes de it√°lico
    texto_processado = re.sub(r'\*(.*?)\*', r'<i>\1</i>', texto_processado)
    
    # Substituir caracteres de marca√ß√£o por HTML
    texto_processado = texto_processado.replace('---', '<hr/>')
    texto_processado = re.sub(r'==(.*?)==', r'<u>\1</u>', texto_processado)
    
    # Melhorar formata√ß√£o de listas
    linhas = texto_processado.split('\n')
    for i in range(len(linhas)):
        # Converter listas numeradas
        if re.match(r'^\d+\.\s', linhas[i].strip()):
            numero = linhas[i].strip().split('.')[0]
            resto = '.'.join(linhas[i].strip().split('.')[1:])
            linhas[i] = f"{numero}. {resto.strip()}"
    
    return '\n'.join(linhas)

def destacar_numeros_no_texto(texto):
    """
    Destaca n√∫meros no texto para melhor visualiza√ß√£o.
    
    Args:
        texto: Texto contendo n√∫meros
        
    Returns:
        str: Texto com n√∫meros destacados
    """
    import re
    # Encontrar todos os n√∫meros no texto
    numeros = re.findall(r'\d+[.,]?\d*%?', texto)
    
    # Substituir cada n√∫mero por uma vers√£o destacada
    texto_formatado = texto
    for numero in numeros:
        texto_formatado = texto_formatado.replace(numero, f"<b><font color='#4D268C'>{numero}</font></b>")
    
    return texto_formatado

def formatar_texto_rico(texto):
    """
    Aplica formata√ß√£o rica ao texto.
    
    Args:
        texto: Texto original
        
    Returns:
        str: Texto com formata√ß√£o rica
    """
    import re
    
    # Substituir marca√ß√µes de negrito e it√°lico
    texto_formatado = texto
    
    # Substituir padr√µes de negrito
    texto_formatado = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', texto_formatado)
    
    # Substituir padr√µes de it√°lico
    texto_formatado = re.sub(r'\*(.*?)\*', r'<i>\1</i>', texto_formatado)
    
    # Substituir marca√ß√µes de sublinhado
    texto_formatado = re.sub(r'__(.*?)__', r'<u>\1</u>', texto_formatado)
    
    # Substituir marca√ß√µes de tachado
    texto_formatado = re.sub(r'~~(.*?)~~', r'<strike>\1</strike>', texto_formatado)
    
    # Destacar palavras-chave comuns em an√°lises de mercado
    palavras_chave = [
        'crescimento', 'aumento', 'redu√ß√£o', 'queda', 'tend√™ncia', 
        'mercado', 'economia', 'infla√ß√£o', 'PIB', 'taxa', 
        'investimento', 'expans√£o', 'contra√ß√£o', 'recess√£o', 'recupera√ß√£o',
        'oportunidade', 'desafio', 'risco', 'estrat√©gia', 'competi√ß√£o',
        'inova√ß√£o', 'tecnologia', 'sustentabilidade', 'regula√ß√£o', 'consumidor'
    ]
    
    for palavra in palavras_chave:
        # Verificar se a palavra existe no texto (como palavra completa)
        if re.search(r'\b' + palavra + r'\b', texto_formatado, re.IGNORECASE):
            # Substituir apenas palavras completas, preservando mai√∫sculas/min√∫sculas
            texto_formatado = re.sub(
                r'\b(' + palavra + r')\b', 
                r'<font color="#4D268C">\1</font>', 
                texto_formatado, 
                flags=re.IGNORECASE
            )
    
    return texto_formatado

def gerar_relatorio_executivo(tema, diretriz, resposta_ia, links_utilizados=None):
    """
    Gera um relat√≥rio executivo em PDF com os resultados da an√°lise de mercado.
    
    Args:
        tema: Tema pesquisado
        diretriz: Diretriz de an√°lise
        resposta_ia: Resposta da IA
        links_utilizados: Lista de links utilizados na pesquisa
    
    Returns:
        bytes: Conte√∫do do PDF em formato base64 para download
    """
    buffer = BytesIO()
    
    # Configura√ß√£o do documento
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=letter,
        leftMargin=72,
        rightMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Estilos
    styles = getSampleStyleSheet()
    
    # Estilo personalizado para t√≠tulos e subt√≠tulos
    styles.add(ParagraphStyle(
        name='TituloRelatorio',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=16,
        textColor=colors.HexColor('#4D268C'),  # Cor da Rede Lius
        alignment=1,  # Centralizado
        fontName='Helvetica-Bold'
    ))
    
    styles.add(ParagraphStyle(
        name='SubtituloRelatorio',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=12,
        textColor=colors.HexColor('#FCA629'),  # Cor secund√°ria
        alignment=0,  # Alinhado √† esquerda
        fontName='Helvetica-Bold',
        borderPadding=5,
        borderWidth=0,
        borderColor=colors.HexColor('#FCA629'),
        borderRadius=5
    ))
    
    styles.add(ParagraphStyle(
        name='TextoNormal',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        spaceAfter=10,
        alignment=4  # Justificado
    ))
    
    styles.add(ParagraphStyle(
        name='Destaque',
        parent=styles['Normal'],
        fontSize=12,
        leading=16,
        textColor=colors.HexColor('#4D268C'),
        backColor=colors.HexColor('#F5F5F5'),
        borderPadding=10,
        borderWidth=1,
        borderColor=colors.HexColor('#E0E0E0'),
        borderRadius=5,
        spaceAfter=15,
        alignment=4  # Justificado
    ))
    
    styles.add(ParagraphStyle(
        name='Rodape',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.HexColor('#666666'),
        alignment=1  # Centralizado
    ))
    
    # Adicionar estilos para formata√ß√£o especial
    styles.add(ParagraphStyle(
        name='ItemLista',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        leftIndent=20,
        firstLineIndent=0,
        bulletIndent=10,
        spaceBefore=2,
        spaceAfter=2,
        alignment=0  # Alinhado √† esquerda
    ))
    
    styles.add(ParagraphStyle(
        name='TituloSecao',
        parent=styles['Heading3'],
        fontSize=14,
        leading=18,
        textColor=colors.HexColor('#4D268C'),
        spaceBefore=12,
        spaceAfter=6,
        alignment=0  # Alinhado √† esquerda
    ))
    
    styles.add(ParagraphStyle(
        name='Citacao',
        parent=styles['Normal'],
        fontSize=11,
        leading=16,
        leftIndent=30,
        rightIndent=30,
        textColor=colors.HexColor('#555555'),
        italics=True,
        spaceBefore=6,
        spaceAfter=6,
        alignment=4  # Justificado
    ))
    
    # Conte√∫do do relat√≥rio
    conteudo = []
    
    # Cabe√ßalho com logo e t√≠tulo
    cabecalho_dados = [
        [Image("icon.png", width=80, height=80), 
         Paragraph(f"<b>Relat√≥rio de Monitoramento de Mercado</b><br/><br/>Rede Lius Agostinianos", styles['TituloRelatorio'])]
    ]
    
    cabecalho_tabela = Table(cabecalho_dados, colWidths=[100, 350])
    cabecalho_tabela.setStyle(TableStyle([
        ('ALIGN', (0, 0), (0, 0), 'CENTER'),
        ('ALIGN', (1, 0), (1, 0), 'CENTER'),
        ('VALIGN', (0, 0), (1, 0), 'MIDDLE'),
    ]))
    
    conteudo.append(cabecalho_tabela)
    conteudo.append(Spacer(1, 20))
    
    # Data e informa√ß√µes do relat√≥rio
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")
    info_relatorio = [
        [Paragraph(f"<b>Data:</b> {data_atual}", styles['TextoNormal']), 
         Paragraph(f"<b>Tema:</b> {tema}", styles['TextoNormal'])]
    ]
    
    info_tabela = Table(info_relatorio, colWidths=[225, 225])
    info_tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.HexColor('#F8F8F8')),
        ('BOX', (0, 0), (1, 0), 1, colors.HexColor('#E0E0E0')),
        ('PADDING', (0, 0), (1, 0), 10),
    ]))
    
    conteudo.append(info_tabela)
    conteudo.append(Spacer(1, 25))
    
    # √çcones para cada se√ß√£o (usando caracteres Unicode como substitutos)
    icone_sumario = "üìä "  # √çcone para sum√°rio
    icone_escopo = "üîç "   # √çcone para escopo
    icone_analise = "üìà "  # √çcone para an√°lise
    icone_fontes = "üìö "   # √çcone para fontes
    icone_conclusao = "‚úÖ " # √çcone para conclus√£o
    
    # Sum√°rio Executivo
    conteudo.append(Paragraph(f"{icone_sumario}SUM√ÅRIO EXECUTIVO", styles['SubtituloRelatorio']))
    
    # Extrair primeiro par√°grafo da resposta para o sum√°rio
    primeiro_paragrafo = resposta_ia.split('\n\n')[0] if '\n\n' in resposta_ia else resposta_ia
    conteudo.append(Paragraph(primeiro_paragrafo, styles['Destaque']))
    conteudo.append(Spacer(1, 20))
    
    # Tema e diretriz
    conteudo.append(Paragraph(f"{icone_escopo}ESCOPO DA AN√ÅLISE", styles['SubtituloRelatorio']))
    
    # Tabela para tema e diretriz
    escopo_dados = [
        [Paragraph("<b>Tema pesquisado:</b>", styles['TextoNormal']), 
         Paragraph(tema, styles['TextoNormal'])],
        [Paragraph("<b>Diretriz de an√°lise:</b>", styles['TextoNormal']), 
         Paragraph(diretriz, styles['TextoNormal'])]
    ]
    
    escopo_tabela = Table(escopo_dados, colWidths=[150, 300])
    escopo_tabela.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, 1), colors.HexColor('#F0F0F0')),
        ('GRID', (0, 0), (1, 1), 0.5, colors.HexColor('#CCCCCC')),
        ('PADDING', (0, 0), (1, 1), 8),
    ]))
    
    conteudo.append(escopo_tabela)
    conteudo.append(Spacer(1, 20))
    
    # An√°lise Completa
    conteudo.append(Paragraph(f"{icone_analise}AN√ÅLISE DETALHADA", styles['SubtituloRelatorio']))
    
    # Pr√©-processamento do texto para melhorar a formata√ß√£o
    resposta_formatada = pre_processar_texto_ia(resposta_ia)
    
    # Dividir a resposta em par√°grafos e adicionar cada um
    paragrafos_resposta = resposta_formatada.split('\n')
    
    # Ignorar o primeiro par√°grafo que j√° foi usado no sum√°rio
    for i, p in enumerate(paragrafos_resposta):
        if i == 0 and p.strip() == primeiro_paragrafo.strip():
            continue
            
        if p.strip():
            # Verificar se √© um t√≠tulo
            if p.isupper() or p.startswith('#'):
                # Adicionar espa√ßo antes de novos t√≠tulos
                conteudo.append(Spacer(1, 15))
                conteudo.append(Paragraph(p, styles['SubtituloRelatorio']))
            else:
                # Verificar se o par√°grafo cont√©m dados num√©ricos que poderiam ser um gr√°fico
                import re
                numeros = re.findall(r'\d+[.,]?\d*%?', p)
                
                if len(numeros) >= 3 and ("crescimento" in p.lower() or "aumento" in p.lower() or 
                                         "percentual" in p.lower() or "compara√ß√£o" in p.lower()):
                    # Criar uma tabela simples para destacar dados num√©ricos
                    conteudo.append(Paragraph(p, styles['TextoNormal']))
                    
                    # Exemplo de visualiza√ß√£o de dados (barra horizontal simples)
                    dados_viz = [[n, "‚ñ†" * (len(n) + 2)] for n in numeros[:5]]
                    tabela_viz = Table(dados_viz, colWidths=[80, 300])
                    tabela_viz.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, len(dados_viz)-1), colors.HexColor('#F0F0F0')),
                        ('TEXTCOLOR', (1, 0), (1, len(dados_viz)-1), colors.HexColor('#4D268C')),
                        ('ALIGN', (0, 0), (1, len(dados_viz)-1), 'LEFT'),
                        ('PADDING', (0, 0), (1, len(dados_viz)-1), 5),
                    ]))
                    conteudo.append(tabela_viz)
                else:
                    conteudo.append(Paragraph(p, styles['TextoNormal']))
    
    conteudo.append(Spacer(1, 20))
    
    # Fontes utilizadas
    if links_utilizados and len(links_utilizados) > 0:
        conteudo.append(Paragraph(f"{icone_fontes}FONTES CONSULTADAS", styles['SubtituloRelatorio']))
        
        # Tabela para fontes
        fontes_dados = []
        for i, link in enumerate(links_utilizados):
            fontes_dados.append([Paragraph(f"{i+1}.", styles['TextoNormal']), 
                                Paragraph(link, styles['TextoNormal'])])
        
        fontes_tabela = Table(fontes_dados, colWidths=[30, 420])
        fontes_tabela.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, len(fontes_dados)-1), colors.HexColor('#F8F8F8')),
            ('GRID', (0, 0), (1, len(fontes_dados)-1), 0.5, colors.HexColor('#DDDDDD')),
            ('PADDING', (0, 0), (1, len(fontes_dados)-1), 5),
        ]))
        
        conteudo.append(fontes_tabela)
        conteudo.append(Spacer(1, 20))
    
    # Conclus√£o e Recomenda√ß√µes
    conteudo.append(Paragraph(f"{icone_conclusao}CONCLUS√ïES E RECOMENDA√á√ïES", styles['SubtituloRelatorio']))
    
    # Extrair √∫ltimo par√°grafo da resposta para conclus√µes
    ultimo_paragrafo = resposta_formatada.split('\n\n')[-1] if '\n\n' in resposta_formatada else resposta_formatada
    
    # Destacar conclus√µes em uma caixa com bordas arredondadas
    conteudo.append(Paragraph(ultimo_paragrafo, styles['Destaque']))
    
    # Rodap√©
    conteudo.append(Spacer(1, 30))
    
    # Linha horizontal
    conteudo.append(Paragraph("<hr/>", styles['TextoNormal']))
    
    # Rodap√© com logo pequeno e copyright
    rodape_dados = [
        [Image("icon.png", width=30, height=30), 
         Paragraph("¬© 2025 FP&A e Or√ßamento - Rede Lius Agostinianos. Todos os direitos reservados.", styles['Rodape'])]
    ]
    
    rodape_tabela = Table(rodape_dados, colWidths=[40, 410])
    rodape_tabela.setStyle(TableStyle([
        ('ALIGN', (0, 0), (0, 0), 'CENTER'),
        ('ALIGN', (1, 0), (1, 0), 'CENTER'),
        ('VALIGN', (0, 0), (1, 0), 'MIDDLE'),
    ]))
    
    conteudo.append(rodape_tabela)
    
    # Construir o documento
    doc.build(conteudo)
    
    # Retornar o PDF como base64 para download
    pdf_bytes = buffer.getvalue()
    buffer.close()
    b64_pdf = base64.b64encode(pdf_bytes).decode()
    return b64_pdf

# Adicionar bot√£o para gerar relat√≥rio executivo
if 'messages' in st.session_state and len(st.session_state.messages) > 0:
    # Encontrar a √∫ltima resposta da IA
    ultima_resposta = None
    for msg in reversed(st.session_state.messages):
        if msg['role'] == 'assistant':
            ultima_resposta = msg['content']
            break
    
    if ultima_resposta:
        st.write("---")
        st.subheader("Relat√≥rio Executivo")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.write("Gere um relat√≥rio executivo em PDF com os resultados da an√°lise.")
        
        with col2:
            if st.button("Gerar Relat√≥rio Executivo"):
                with st.spinner("Gerando relat√≥rio executivo..."):
                    # Obter links utilizados (se dispon√≠veis)
                    links_utilizados = []
                    try:
                        if 'links' in locals():
                            links_utilizados = links
                    except:
                        pass
                    
                    # Gerar o relat√≥rio
                    b64_pdf = gerar_relatorio_executivo(
                        tema=tema if 'tema' in locals() else "Tema n√£o especificado",
                        diretriz=diretriz if 'diretriz' in locals() else "Diretriz n√£o especificada",
                        resposta_ia=ultima_resposta,
                        links_utilizados=links_utilizados
                    )
                    
                    # Criar bot√£o de download
                    nome_arquivo = f"relatorio_executivo_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                    st.download_button(
                        label="Baixar Relat√≥rio Executivo",
                        data=base64.b64decode(b64_pdf),
                        file_name=nome_arquivo,
                        mime="application/pdf",
                        key="download_relatorio_executivo"
                    )
                    
                    st.success("Relat√≥rio executivo gerado com sucesso!")
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

# Inicializa√ß√£o do analisador de sentimento
@st.cache_resource
def inicializar_analisador_sentimento():
    try:
        nltk.download('vader_lexicon', quiet=True)
        return SentimentIntensityAnalyzer()
    except Exception as e:
        st.error(f"Erro ao inicializar analisador de sentimento: {str(e)}")
        return None

# Fun√ß√£o para analisar sentimento do texto
def analisar_sentimento(texto):
    sia = inicializar_analisador_sentimento()
    if sia:
        sentimento = sia.polarity_scores(texto)
        return sentimento
    return None


def criar_prompt_avancado(tema, diretriz, textos, imagens=None):
    """Cria um prompt avan√ßado com chain-of-thought para an√°lises mais profundas"""
    
    # Base do prompt
    prompt = f"""
    Analise o seguinte conjunto de not√≠cias sobre '{tema}' e responda de acordo com a diretriz: '{diretriz}'
    
    Para realizar uma an√°lise completa e aprofundada, siga estas etapas de racioc√≠nio:
    
    1. COMPREENS√ÉO DOS FATOS:
       - Identifique os principais fatos e eventos mencionados nas not√≠cias
       - Organize-os cronologicamente quando poss√≠vel
       - Destaque dados quantitativos e estat√≠sticas relevantes
    
    2. AN√ÅLISE DE CONTEXTO:
       - Considere o contexto econ√¥mico, pol√≠tico e social atual
       - Identifique tend√™ncias de curto e longo prazo
       - Avalie como esses eventos se relacionam com o hist√≥rico do setor
    
    3. IMPACTO PARA A REDE LIUS:
       - Analise as implica√ß√µes diretas para a Rede Lius Agostinianos
       - Identifique oportunidades e amea√ßas espec√≠ficas
       - Considere o impacto em diferentes √°reas: financeira, operacional, reputacional
    
    4. CEN√ÅRIOS FUTUROS:
       - Projete 3 cen√°rios poss√≠veis (otimista, realista, pessimista)
       - Estime probabilidades para cada cen√°rio
       - Sugira indicadores a serem monitorados para cada cen√°rio
    
    5. RECOMENDA√á√ïES ESTRAT√âGICAS:
       - Proponha a√ß√µes concretas de curto, m√©dio e longo prazo
       - Priorize as recomenda√ß√µes por impacto e viabilidade
       - Sugira m√©tricas para acompanhamento dos resultados
    
    Textos para an√°lise:
    {textos[:8000]}
    """
    
    # Adiciona descri√ß√£o de imagens se dispon√≠veis
    if imagens and len(imagens) > 0:
        prompt += "\n\nImagens relevantes encontradas nas not√≠cias:\n"
        for i, img in enumerate(imagens):
            prompt += f"{i+1}. {img.get('alt', 'Imagem sem descri√ß√£o')} (URL: {img.get('url', 'N/A')})\n"
    
    return prompt